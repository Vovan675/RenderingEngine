#include "common.h"

layout(location = 0) in vec2 uv;

layout(location = 0) out vec4 outColor;

layout (set=1, binding=0) uniform sampler2D textures[];

layout(set=0, binding=0) uniform UBO
{
	uint composite_final_tex_id;
	uint normal_tex_id;
	uint depth_tex_id;
};


vec2 GetUV(vec3 view_pos)
{
    vec4 proj_position = projection * vec4(view_pos, 1.0);
    proj_position.xy /= proj_position.w;
    return proj_position.xy * 0.5f + 0.5f;
}

float ray_step = 1.2f;
int binary_steps = 16;
int steps = 128;

vec3 ssr_binary_search(vec3 step, vec3 current_view_pos)
{
	for (int j = 0; j < binary_steps; j++)
	{
		current_view_pos += step;

		vec2 current_uv = GetUV(current_view_pos);
		float d = texture(textures[depth_tex_id], current_uv).r;
		vec3 vs_pos = getVSPosition(current_uv, d);
		float depth_delta = current_view_pos.z - vs_pos.z;

		step *= 0.5f;
		if (depth_delta > 0.0)
			current_view_pos += step;
		else
			current_view_pos -= step;
	}
	vec2 current_uv = GetUV(current_view_pos);
	return vec3(current_uv, 0);
}

vec3 ssr()
{
    // SSR
    float depth = texture(textures[depth_tex_id], uv).r;
	if (depth == 1.0)
		return vec3(0, 0, 0);

    vec3 normal = texture(textures[normal_tex_id], uv).rgb;
    vec3 view_normal = (view * vec4(normalize(normal), 0)).xyz;
    view_normal = normalize(view_normal);

    vec3 default_view_pos = getVSPosition(uv, depth);
    vec3 view_pos = getVSPosition(uv, depth);
	//vec4 world_pos = inverse(view) * vec4(view_pos, 1.0);

    // Find Reflected camera dir
    vec3 view_dir = normalize(view_pos);
    vec3 ref_view_dir = normalize(reflect(view_dir, view_normal)); 
    vec3 step = ref_view_dir * 0.1;

    vec2 current_uv;
    float current_step = ray_step;
    vec3 current_pos;
    for (int i = 0; i < steps; i++)
    {
        view_pos += step;
        current_uv = GetUV(view_pos);
        if (current_uv.x < 0.0 || current_uv.x > 1.0 || current_uv.y < 0.0 || current_uv.y > 1.0)
            break; // Out of bounds, stop marching
        float new_depth = texture(textures[depth_tex_id], current_uv).r;
        vec3 new_view_pos = getVSPosition(current_uv, new_depth);

        float depth_delta = view_pos.z - new_view_pos.z;

        //return vec3(depth_delta > 0, 0, 0);
	    //vec4 new_world_pos = inverse(view) * vec4(new_view_pos, 1.0);
        //current_step = length(world_pos - new_world_pos);

        #if 0
            // no binary search
            if (depth_delta < 0.5)
            {
                return texture(textures[composite_final_tex_id], current_uv).rgb;
            }
        #else
            // binary search
			if (depth_delta <= 0.0)
			{
				vec3 res = ssr_binary_search(step, view_pos);
				//current_uv = GetUV(new_view_pos);
				vec3 hit_color = texture(textures[composite_final_tex_id], res.xy).rgb;

				float fresnel = clamp(pow(1 - dot(normalize(-default_view_pos), view_normal), 1), 0, 1);
				
				vec2 edge = vec2(1, 1) - pow(clamp(abs(res.xy - 0.5) * 2, 0, 1), vec2(8.0, 8.0));
				float edge_factor =  clamp(min(edge.x, edge.y), 0, 1);
				return hit_color * fresnel * edge_factor;
			}
        #endif

        step *= ray_step;
    }
    return vec3(0, 0, 0);
    //return texture(textures[composite_final_tex_id], current_uv).rgb;
}

void main()
{
    vec3 result = ssr();
	vec3 default_color = texture(textures[composite_final_tex_id], uv).rgb;
    outColor = vec4(default_color + result.xyz, 1);
}